// src/components/BurnTokens.jsx
// Y√™u c·∫ßu: npm install axios @solana/wallet-adapter-react
// N·∫øu c·∫ßn Buffer polyfill, ƒë·∫£m b·∫£o c·∫•u h√¨nh Vite h·ªó tr·ª£ (v√≠ d·ª•: import { Buffer } from 'buffer')
/*
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useWallet, useConnection } from '@solana/wallet-adapter-react';
import { useNavigate } from 'react-router-dom';
import { Transaction } from '@solana/web3.js';
import { Buffer } from 'buffer';

const API_URL = import.meta.env.VITE_API_URL || 'https://cleanyoursol.com/api';

const BurnTokens = () => {
    const { publicKey, signTransaction } = useWallet();
    const { connection } = useConnection();
    const navigate = useNavigate();

    const [tokens, setTokens] = useState([]);
    const [selectedTokens, setSelectedTokens] = useState([]);
    const [loading, setLoading] = useState(false);
    const [burning, setBurning] = useState(false);

    // Load danh s√°ch token t·ª´ API backend (endpoint /tokens)
    useEffect(() => {
        if (!publicKey) return;
        const fetchTokens = async () => {
            setLoading(true);
            try {
                const res = await axios.get(`${API_URL}/tokens`, {
                    params: { wallet: publicKey.toBase58() }
                });
                // Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ { tokens: [...] }
                setTokens(res.data.tokens);
            } catch (err) {
                console.error('L·ªói t·∫£i token:', err);
            } finally {
                setLoading(false);
            }
        };
        fetchTokens();
    }, [publicKey]);

    // Ch·ªçn ho·∫∑c b·ªè ch·ªçn token (d·ª±a theo mint address)
    const toggleSelect = (mint) => {
        setSelectedTokens((prev) => {
            if (prev.includes(mint)) {
                return prev.filter(item => item !== mint);
            } else {
                return [...prev, mint];
            }
        });
    };

    // X·ª≠ l√Ω Burn: g·ªçi API backend ƒë·ªÉ t·∫°o transaction, k√Ω giao d·ªãch v√† g·ª≠i l√™n m·∫°ng l∆∞·ªõi
    const handleBurn = async () => {
        if (!publicKey || selectedTokens.length === 0) return;
        setBurning(true);
        try {
            // L·ªçc ra c√°c token ƒë√£ ƒë∆∞·ª£c ch·ªçn
            const tokensToBurn = tokens.filter(token => selectedTokens.includes(token.mint));
            // Chu·∫©n b·ªã payload: bao g·ªìm wallet v√† c√°c token c·∫ßn burn.
            // Ch√∫ √Ω: ƒë·∫£m b·∫£o token object c√≥ c√°c tr∆∞·ªùng: mint, balance, decimals (v·ªõi decimals c√≥ th·ªÉ t·ª´ d·ªØ li·ªáu Solscan)
            const payload = {
                wallet: publicKey.toBase58(),
                tokens: tokensToBurn.map(token => ({
                    mint: token.mint,
                    balance: token.balance,
                    decimals: token.decimals || 0
                }))
            };

            // G·ªçi backend API t·∫°o transaction burn
            const { data } = await axios.post(`${API_URL}/burn`, payload);
            if (!data.tx) throw new Error('Did not receive transaction from server');

            // Chuy·ªÉn transaction t·ª´ base64 v·ªÅ ƒë·ªëi t∆∞·ª£ng Transaction
            const txBuffer = Buffer.from(data.tx, 'base64');
            const transaction = Transaction.from(txBuffer);

            // S·ª≠ d·ª•ng wallet adapter ƒë·ªÉ k√Ω transaction
            const signedTx = await signTransaction(transaction);

            // G·ª≠i transaction ƒë√£ k√Ω l√™n m·∫°ng l∆∞·ªõi Solana
            const txid = await connection.sendRawTransaction(signedTx.serialize());
            console.log('Transaction sent:', txid);

            // ƒê·ª£i x√°c nh·∫≠n transaction
            await connection.confirmTransaction(txid, 'confirmed');
            console.log('Transaction confirmed');

            // Sau khi burn th√†nh c√¥ng, t·ª± ƒë·ªông chuy·ªÉn sang ch·ª©c nƒÉng claim (ho·∫∑c trang Claim)
            navigate('/claim'); // ƒê·∫£m b·∫£o b·∫°n c√≥ ƒë·ªãnh nghƒ©a route /claim
        } catch (error) {
            console.error('L·ªói trong qu√° tr√¨nh burn:', error);
            alert('Error burn token.');
        } finally {
            setBurning(false);
        }
    };

    if (!publicKey) {
        return <div>Please connect your Solana wallet.</div>;
    }

    return (
        <div className="container mx-auto p-4">
            <h2 className="text-xl font-bold mb-4">Token list</h2>
            {loading ? (
                <p>Loading token...</p>
            ) : (
                <table className="min-w-full border">
                    <thead>
                        <tr>
                            <th className="p-2 border">Select</th>
                            <th className="p-2 border">Icon</th>
                            <th className="p-2 border">Name Token</th>
                            <th className="p-2 border">address</th>
                            <th className="p-2 border">Quantity</th>
                            <th className="p-2 border">USD</th>
                        </tr>
                    </thead>
                    <tbody>
                        {tokens.map(token => (
                            <tr key={token.mint}>
                                <td className="p-2 border text-center">
                                    <input 
                                        type="checkbox" 
                                        checked={selectedTokens.includes(token.mint)}
                                        onChange={() => toggleSelect(token.mint)}
                                    />
                                </td>
                                <td className="p-2 border text-center">
                                    <img src={token.avatar} alt={token.name} className="w-8 h-8 inline" />
                                </td>
                                <td className="p-2 border">{token.name}</td>
                                <td className="p-2 border">{token.mint.substring(0, 4)}...{token.mint.slice(-4)}</td>
                                <td className="p-2 border">{token.balance}</td>
                                <td className="p-2 border">${(token.balance * token.price).toFixed(2)}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            )}
            <div className="mt-4">
                <button 
                    onClick={handleBurn}
                    disabled={burning || selectedTokens.length === 0}
                    className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
                >
                    {burning ? "Burning..." : "üî• Burn Selected Tokens"}
                </button>
            </div>
        </div>
    );
};

export default BurnTokens;
*/
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useWallet, useConnection } from '@solana/wallet-adapter-react';
import { useNavigate } from 'react-router-dom';
import { Transaction } from '@solana/web3.js';
import { Buffer } from 'buffer';

const API_URL = import.meta.env.VITE_API_URL || 'https://cleanyoursol.com/api';

const BurnTokens = () => {
    const { publicKey, signTransaction } = useWallet();
    const { connection } = useConnection();
    const navigate = useNavigate();

    const [tokens, setTokens] = useState([]);
    const [selectedTokens, setSelectedTokens] = useState([]);
    const [loading, setLoading] = useState(false);
    const [burning, setBurning] = useState(false);

    // Load danh s√°ch token t·ª´ backend (endpoint /tokens)
    useEffect(() => {
        if (!publicKey) return;
        const fetchTokens = async () => {
            setLoading(true);
            try {
                const res = await axios.get(`${API_URL}/tokens`, {
                    params: { wallet: publicKey.toBase58() }
                });
                setTokens(res.data.tokens);
            } catch (err) {
                console.error('L·ªói t·∫£i token:', err);
            } finally {
                setLoading(false);
            }
        };
        fetchTokens();
    }, [publicKey]);

    // Ch·ªçn ho·∫∑c b·ªè ch·ªçn token d·ª±a theo mint
    const toggleSelect = (mint) => {
        setSelectedTokens((prev) => {
            if (prev.includes(mint)) {
                return prev.filter(item => item !== mint);
            } else {
                return [...prev, mint];
            }
        });
    };

    // X·ª≠ l√Ω Burn: g·ª≠i payload ƒë·∫øn backend /burn-claim ƒë·ªÉ t·∫°o giao d·ªãch burn & chuy·ªÉn ph√≠
    const handleBurn = async () => {
        if (!publicKey || selectedTokens.length === 0) return;
        setBurning(true);
        try {
            // L·ªçc ra c√°c token ƒë√£ ƒë∆∞·ª£c ch·ªçn
            const tokensToBurn = tokens.filter(token => selectedTokens.includes(token.mint));
            const payload = {
                wallet: publicKey.toBase58(),
                tokens: tokensToBurn.map(token => ({
                    mint: token.mint,
                    balance: token.balance,
                    decimals: token.decimals || 0
                })),
                vipLevel: "vip0" // ho·∫∑c thay ƒë·ªïi theo tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng
            };

            // G·ªçi API backend t·∫°o giao d·ªãch burn-claim
            const { data } = await axios.post(`${API_URL}/burn-claim`, payload);
            console.log("Response from burn-claim:", data);
            // Ki·ªÉm tra xem backend tr·∫£ v·ªÅ tr∆∞·ªùng "tx" hay kh√¥ng
            if (!data.tx) throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c giao d·ªãch t·ª´ server');

            // Chuy·ªÉn t·ª´ base64 v·ªÅ ƒë·ªëi t∆∞·ª£ng Transaction
            const txBuffer = Buffer.from(data.tx, 'base64');
            const transaction = Transaction.from(txBuffer);

            // Y√™u c·∫ßu ng∆∞·ªùi d√πng k√Ω giao d·ªãch (1 l·∫ßn duy nh·∫•t)
            const signedTx = await signTransaction(transaction);

            // G·ª≠i giao d·ªãch ƒë√£ k√Ω l√™n m·∫°ng l∆∞·ªõi Solana
            const txid = await connection.sendRawTransaction(signedTx.serialize());
            console.log('Giao d·ªãch ƒë√£ g·ª≠i:', txid);

            // ƒê·ª£i x√°c nh·∫≠n giao d·ªãch
            await connection.confirmTransaction(txid, 'confirmed');
            console.log('Giao d·ªãch ƒë√£ x√°c nh·∫≠n');

            // Sau khi burn th√†nh c√¥ng, chuy·ªÉn h∆∞·ªõng sang trang Claim
            navigate('/claim');
        } catch (error) {
            console.error('L·ªói khi burn token:', error);
            alert('C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh burn token.');
        } finally {
            setBurning(false);
        }
    };

    if (!publicKey) {
        return <div>Vui l√≤ng k·∫øt n·ªëi v√≠ Solana c·ªßa b·∫°n.</div>;
    }

    return (
        <div className="container mx-auto p-4">
            <h2 className="text-xl font-bold mb-4">Token list</h2>
            {loading ? (
                <p>ƒêang t·∫£i token...</p>
            ) : (
                <table className="min-w-full border">
                    <thead>
                        <tr>
                            <th className="p-2 border">Ch·ªçn</th>
                            <th className="p-2 border">Icon</th>
                            <th className="p-2 border">T√™n Token</th>
                            <th className="p-2 border">ƒê·ªãa ch·ªâ</th>
                            <th className="p-2 border">S·ªë l∆∞·ª£ng</th>
                            <th className="p-2 border">USD</th>
                        </tr>
                    </thead>
                    <tbody>
                        {tokens.map(token => (
                            <tr key={token.mint}>
                                <td className="p-2 border text-center">
                                    <input 
                                        type="checkbox" 
                                        checked={selectedTokens.includes(token.mint)}
                                        onChange={() => toggleSelect(token.mint)}
                                    />
                                </td>
                                <td className="p-2 border text-center">
                                    <img src={token.avatar} alt={token.name} className="w-8 h-8 inline" />
                                </td>
                                <td className="p-2 border">{token.name}</td>
                                <td className="p-2 border">{token.mint.substring(0, 4)}...{token.mint.slice(-4)}</td>
                                <td className="p-2 border">{token.balance}</td>
                                <td className="p-2 border">${(token.balance * token.price).toFixed(2)}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            )}
            <div className="mt-4">
                <button 
                    onClick={handleBurn}
                    disabled={burning || selectedTokens.length === 0}
                    className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
                >
                    {burning ? "ƒêang x·ª≠ l√Ω..." : "üî• Burn & Claim Token"}
                </button>
            </div>
        </div>
    );
};

export default BurnTokens;
