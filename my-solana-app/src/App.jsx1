import { useEffect, useState } from "react";
import { WalletMultiButton } from "@solana/wallet-adapter-react-ui";
import { useWallet } from "@solana/wallet-adapter-react";
import {
    Connection,
    PublicKey,
    LAMPORTS_PER_SOL,
    Transaction,
} from "@solana/web3.js";

const SOLANA_NETWORK = "https://divine-old-bridge.solana-mainnet.quiknode.pro/e6cba5f73fa09260f937f65f73bbe8fa7fa0dd24";
const API_CLAIM_URL = "https://cleanyoursol.com/api/claim-multiple";
const MIN_REQUIRED_SOL = 0.002; // Minimum SOL required to claim

const App = () => {
    const { publicKey, sendTransaction } = useWallet();
    const [solBalance, setSolBalance] = useState(null);
    const [claimableTokens, setClaimableTokens] = useState([]);
    const [errorMessage, setErrorMessage] = useState(""); // Store error message
    const connection = new Connection(SOLANA_NETWORK, "confirmed");

    // Fetch SOL balance
    useEffect(() => {
        const fetchBalance = async () => {
            if (publicKey) {
                const balance = await connection.getBalance(publicKey);
                setSolBalance(balance / LAMPORTS_PER_SOL);
            }
        };
        fetchBalance();
    }, [publicKey]);

    // Fetch empty tokens
    useEffect(() => {
        const fetchClaimableTokens = async () => {
            if (!publicKey) return;

            const tokenAccounts = await connection.getParsedTokenAccountsByOwner(publicKey, {
                programId: new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"),
            });

            const emptyTokens = tokenAccounts.value
                .filter((account) => account.account.data.parsed.info.tokenAmount.uiAmount === 0)
                .map((account) => ({
                    id: account.pubkey.toBase58(),
                    mint: account.account.data.parsed.info.mint,
                }));

            setClaimableTokens(emptyTokens);
        };

        fetchClaimableTokens();
    }, [publicKey]);

    // Claim function with SOL balance check
    const claimAllTokens = async () => {
        setErrorMessage(""); // Reset error message

        if (!claimableTokens.length) {
            setErrorMessage("No tokens available to claim.");
            return;
        }

        if (solBalance < MIN_REQUIRED_SOL) {
            setErrorMessage(`You need at least ${MIN_REQUIRED_SOL} SOL to claim tokens.`);
            return;
        }

        const walletPublicKey = publicKey.toBase58();
        const tokenIds = claimableTokens.map(token => token.id);

        try {
            console.log("Sending claim request:", walletPublicKey, tokenIds);

            const response = await fetch(API_CLAIM_URL, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ 
                    publicKey: walletPublicKey, 
                    tokenIds, 
                    referral: localStorage.getItem("referralCode") || null 
                }),
            });

            const data = await response.json();
            if (!data.transaction) {
                setErrorMessage("API Error: " + (data.error || "Unknown error"));
                return;
            }

            console.log("Transaction received from API:", data.transaction);

            const txBuffer = Buffer.from(data.transaction, "base64");
            let transaction = Transaction.from(txBuffer);

            const signedTx = await window.solana.signTransaction(transaction);
            const rawTx = signedTx.serialize();

            const txid = await connection.sendRawTransaction(rawTx);
            await connection.confirmTransaction(txid, "confirmed");

            alert("Claim successful! TX ID: " + txid);

            await fetch("/api/ledger", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    publicKey: walletPublicKey,
                    tokenId: tokenIds.join(","),
                    txHash: txid,
                    amount: data.refundAmount,
                    referral: localStorage.getItem("referralCode") || null,
                }),
            });

            setClaimableTokens([]);
        } catch (error) {
            console.error("Error while claiming tokens:", error);
            setErrorMessage("Claim failed! " + error.message);
        }
    };

    return (
        <div style={{ textAlign: "center", marginTop: "50px" }}>
            <h1>ðŸ¦„ Connect Your Solana Wallet</h1>
            <WalletMultiButton />

            {publicKey && (
                <div>
                    <p>ðŸ”— Wallet Address: <strong>{publicKey.toBase58()}</strong></p>
                    <p>ðŸ’° SOL Balance: {solBalance !== null ? `${solBalance} SOL` : "Loading..."}</p>

                    {errorMessage && (
                        <p style={{ color: "red", fontWeight: "bold" }}>{errorMessage}</p>
                    )}

                    <h2>ðŸ“œ Empty Token List</h2>
                    {claimableTokens.length > 0 ? (
                        <div>
                            {claimableTokens.map((token, index) => (
                                <p key={index}>ðŸ”¹ Token Account: {token.id}</p>
                            ))}
                            <button
                                onClick={claimAllTokens}
                                disabled={solBalance < MIN_REQUIRED_SOL}
                                style={{
                                    padding: "10px 20px",
                                    backgroundColor: solBalance < MIN_REQUIRED_SOL ? "gray" : "green",
                                    color: "white",
                                    border: "none",
                                    borderRadius: "5px",
                                    cursor: solBalance < MIN_REQUIRED_SOL ? "not-allowed" : "pointer",
                                    marginTop: "10px",
                                }}
                            >
                                âœ… Claim All Empty Tokens
                            </button>
                        </div>
                    ) : (
                        <p>âœ… No empty tokens found.</p>
                    )}
                </div>
            )}
        </div>
    );
};

export default App;
